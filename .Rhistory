rootNode<-length(myTree$tip.label)+1
#we pull out the row for the root node of the distance matrix
#looking only at columns for other nodes, not tips
FADs<-allDistancesAsMatrix[rootNode,seq(from=rootNode+2,to=nrow(allDistancesAsMatrix))]
return(sort(as.vector(FADs)))
}
FitExponential <- function(myTree, showPlot = FALSE) {
stopifnot(is(myTree, "phylo"))
# assumes FADs are returned sorted from GetFADs() function
sortedFADs <- GetFADs(myTree)
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
if (showPlot){
MYA <- max(as.numeric(dist.nodes(myTree)))/2
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
}
return(nls_mod)
}
set.seed(102)
exampleFigure <- function(d, n) {
testTree <- pbtree(1, d=d, n=n)
testFADs <- GetFADs(testTree)
myModel <- FitExponential(testTree)
forPlot <- data.frame(x=predict(myModel, newdata = list(dates=testFADs)), y=testFADs)
thePlot <- qplot(x=1:length(testFADs), y=testFADs, size=I(3)) +
geom_line(aes(x=x, y=y), data=forPlot, linetype=2, color="red", size=2) +
scale_x_continuous(labels=NULL) +
scale_y_continuous(labels=NULL) +
coord_flip() +
labs(x="Cumulative Number of Observed Taxa", y="Time", title=sprintf("Extinction = %.2f", d))
return(thePlot)
}
tiff(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", width=2000, height=1000)
grid.arrange(exampleFigure(d=1, n=300), exampleFigure(d=0, n=300), ncol=2)
dev.off()
tiff(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", width=1600, height=800)
grid.arrange(exampleFigure(d=1, n=300), exampleFigure(d=0, n=300), ncol=2)
dev.off()
expcurve <- FitExponential(FADs = vrba$FAD)
GetFADs <- function(myTree){
stopifnot(is(myTree, "phylo"))
require(ape)
allDistancesAsMatrix<-ape::dist.nodes(myTree)
#tips are numbered 1 + nTips, so we can add 1 to get the root node
rootNode<-length(myTree$tip.label)+1
#we pull out the row for the root node of the distance matrix
#looking only at columns for other nodes, not tips
FADs<-allDistancesAsMatrix[rootNode,seq(from=rootNode+2,to=nrow(allDistancesAsMatrix))]
return(sort(as.vector(FADs)))
}
FitExponential <- function(myTree, showPlot = FALSE) {
stopifnot(is(myTree, "phylo"))
# assumes FADs are returned sorted from GetFADs() function
sortedFADs <- GetFADs(myTree)
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
if (showPlot){
MYA <- max(as.numeric(dist.nodes(myTree)))/2
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
}
return(nls_mod)
}
set.seed(102)
exampleFigure <- function(d, n) {
testTree <- pbtree(1, d=d, n=n)
testFADs <- GetFADs(testTree)
myModel <- FitExponential(testTree)
forPlot <- data.frame(x=predict(myModel, newdata = list(dates=testFADs)), y=testFADs)
thePlot <- qplot(x=1:length(testFADs), y=testFADs, size=I(3)) +
geom_line(aes(x=x, y=y), data=forPlot, linetype=2, color="red", size=2) +
scale_x_continuous(labels=NULL) +
scale_y_continuous(labels=NULL) +
coord_flip() +
labs(x="Cumulative Number of Observed Taxa", y="Time", title=sprintf("Extinction = %.2f", d))
return(thePlot)
}
tiff(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", width=1600, height=800)
grid.arrange(exampleFigure(d=1, n=300), exampleFigure(d=0, n=300), ncol=2)
dev.off()
vrba <- read.table(file = "~/Dropbox/TurnoverPulseRedux/vrba_bovid_fads.csv", header=TRUE, sep=",")
## note that the FADs are need to be entered into the exponential model as years elapsed since time=0 (i.e. millions of years since 16MYA)
vrba$FAD <- 16 - vrba$FAD
plot(y=sort(vrba$FAD), x=1:nrow(vrba))
expcurve <- FitExponential(FADs = vrba$FAD)
fitExponentialFADs <- function(sortedFADs) {
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
MYA <- max(as.numeric(dist.nodes(myTree)))/2
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
}
expcurve <- fitExponentialFADs(FADs = vrba$FAD)
vrba$FAD
expcurve <- fitExponentialFADs(sortedFADs = vrba$FAD)
MYA <- max(vrba$FAD)
fitExponentialFADs <- function(sortedFADs) {
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
MYA <- max(vrba$FAD)
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
}
expcurve <- fitExponentialFADs(sortedFADs = vrba$FAD)
Dates2Predict <- seq(from=0, to=16, length.out = 100)
yLabFormatter <- function(x) return(16 - x)
expcurveDF <- data.frame(y=Dates2Predict, x=predict(expcurve, newdata=list(dates=Dates2Predict)))
Dates2Predict
expcurve
fitExponentialFADs <- function(sortedFADs) {
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
MYA <- max(vrba$FAD)
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
return(nls_mod)
}
expcurve <- fitExponentialFADs(sortedFADs = vrba$FAD)
Dates2Predict <- seq(from=0, to=16, length.out = 100)
yLabFormatter <- function(x) return(16 - x)
expcurveDF <- data.frame(y=Dates2Predict, x=predict(expcurve, newdata=list(dates=Dates2Predict)))
expcurve
Dates2Predict <- seq(from=0, to=16, length.out = N)
fitExponentialFADs <- function(sortedFADs) {
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
MYA <- max(vrba$FAD)
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
return(nls_mod)
}
expcurve <- fitExponentialFADs(sortedFADs = vrba$FAD)
Dates2Predict <- seq(from=0, to=16, length.out = N)
Dates2Predict <- seq(from=0, to=16, length.out = length(sortedFADs))
Dates2Predict <- seq(from=0, to=16, length.out = length(vrba$FAD))
Dates2Predict
expcurve <- fitExponentialFADs(sortedFADs = vrba$FAD)
Dates2Predict <- seq(from=0, to=16, length.out = length(vrba$FAD))
yLabFormatter <- function(x) return(16 - x)
expcurveDF <- data.frame(y=Dates2Predict, x=predict(expcurve, newdata=list(dates=Dates2Predict)))
equation <- sprintf("N == N[0] * plain(e)^%.2f * t", expcurve$m$getPars())
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 13, label=equation, parse=TRUE, size=10) +
theme_bw(40)
predict(expcurve, newdata=list(dates=Dates2Predict)
)
Dates2Predict
fitExponentialFADs <- function(sortedFADs) {
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
MYA <- max(vrba$FAD)
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
return(nls_mod)
}
expcurve <- fitExponentialFADs(sortedFADs = sort(vrba$FAD))
Dates2Predict <- seq(from=0, to=16, length.out = length(vrba$FAD))
yLabFormatter <- function(x) return(16 - x)
expcurveDF <- data.frame(y=Dates2Predict, x=predict(expcurve, newdata=list(dates=Dates2Predict)))
equation <- sprintf("N == N[0] * plain(e)^%.2f * t", expcurve$m$getPars())
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 13, label=equation, parse=TRUE, size=10) +
theme_bw(40)
expcurveDF
fitExponentialFADs <- function(sortedFADs) {
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
MYA <- max(vrba$FAD)
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
return(nls_mod)
}
expcurve <- fitExponentialFADs(sortedFADs = sorted(vrba$FAD))
expcurve <- fitExponentialFADs(sortedFADs = sort(vrba$FAD))
Dates2Predict <- seq(from=0, to=16, length.out = 100)
yLabFormatter <- function(x) return(16 - x)
expcurveDF <- data.frame(y=Dates2Predict, x=predict(expcurve, newdata=list(dates=Dates2Predict)))
equation <- sprintf("N == N[0] * plain(e)^%.2f * t", expcurve$m$getPars())
Dates2
Dates2Predict
predict(expcurve, newdata=list(dates=Dates2Predict)
)
?predict
Dates2Predict
seq_along(Dates2Predict)
fitExponentialFADs <- function(sortedFADs) {
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
MYA <- max(vrba$FAD)
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
return(nls_mod)
}
expcurve <- fitExponentialFADs(sortedFADs = sort(vrba$FAD))
Dates2Predict <- seq(from=0, to=16, length.out = length(vrba$FAD))
yLabFormatter <- function(x) return(16 - x)
expcurveDF <- data.frame(y=seq_along(Dates2Predict), x=predict(expcurve, newdata=list(dates=Dates2Predict)))
equation <- sprintf("N == N[0] * plain(e)^%.2f * t", expcurve$m$getPars())
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 13, label=equation, parse=TRUE, size=10) +
theme_bw(40)
N <- 1:length(sort(vrba$FAD))
N
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
sortedFADs <- vrba$FAD
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
nls_mod
MYA <- max(vrba$FAD)
MYA
evenFADs <- seq(0, MYA, length.out = 100)
evenFADs
predictedN <- predict(nls_mod, newdata = sortedFADs)
predictedN
sortedFADs
sortedFADs <- sort(vrba$FAD)
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
nls_mod
MYA <- max(vrba$FAD)
MYA
evenFADs <- seq(0, MYA, length.out = 100)
evenFADs
predictedN <- predict(nls_mod, newdata = sortedFADs)
predictedN
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
evenPredictedN
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
expcurveDF <- data.frame(x=evenFADs, y=evenPredictedN)
expcurve
expcurveDF
equation <- sprintf("N == N[0] * plain(e)^%.2f * t", expcurve$m$getPars())
equation
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 13, label=equation, parse=TRUE, size=10) +
theme_bw(40)
expcurveDF <- data.frame(y=evenFADs, x=evenPredictedN)
equation <- sprintf("N == N[0] * plain(e)^%.2f * t", expcurve$m$getPars())
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 13, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 13, label=equation, parse=TRUE, size=10) +
coord_flip() +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 11, label=equation, parse=TRUE, size=10) +
coord_flip() +
theme_bw(40)
equation <- sprintf("N == N[0] * plain(e)^%.2f * t", expcurve$m$getPars())
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 165, y = 15.3, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 125, y = 5, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 150, y = 15.3, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 145, y = 15.3, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 15.3, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 20, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 10, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 11, label=equation, parse=TRUE, size=10) +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 12, label=equation, parse=TRUE, size=10) +
theme_bw(40)
ggsave("~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullModel/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", height=6, width=6, units=in)
ggsave("~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullModel/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", height=6, width=6, units="in")
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 12, label=equation, parse=TRUE, size=10) +
theme_bw(40)
ggsave(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullModel/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", height=6, width=6, units="in")
ggsave(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", height=6, width=6, units="in")
ggsave(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", height=10, width=10, units="in")
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 12, label=equation, parse=TRUE, size=10) +
coords_flip() +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 12, label=equation, parse=TRUE, size=10) +
coord_flip() +
theme_bw(40)
ggsave(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", height=10, width=10, units="in")
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 12, label=equation, parse=TRUE, size=10) +
coord_flip() +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 11, label=equation, parse=TRUE, size=10) +
coord_flip() +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 13, label=equation, parse=TRUE, size=10) +
coord_flip() +
theme_bw(40)
qplot(y=sort(vrba$FAD), x=1:nrow(vrba), size=I(4)) +
labs(x="N (Cumulative Number of Taxa)", y="t (MYA)") +
scale_y_continuous(label = yLabFormatter, limits=c(9, 16)) +
geom_line(mapping=aes(x=x, y=y), data=expcurveDF, col="red", linetype=2, size=1) +
annotate(geom="text", x = 140, y = 13.5, label=equation, parse=TRUE, size=10) +
coord_flip() +
theme_bw(40)
ggsave(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig1-VrbasTurnoverFig-Recreated.tiff", height=10, width=10, units="in")
GetFADs <- function(myTree){
stopifnot(is(myTree, "phylo"))
require(ape)
allDistancesAsMatrix<-ape::dist.nodes(myTree)
#tips are numbered 1 + nTips, so we can add 1 to get the root node
rootNode<-length(myTree$tip.label)+1
#we pull out the row for the root node of the distance matrix
#looking only at columns for other nodes, not tips
FADs<-allDistancesAsMatrix[rootNode,seq(from=rootNode+2,to=nrow(allDistancesAsMatrix))]
return(sort(as.vector(FADs)))
}
FitExponential <- function(myTree, showPlot = FALSE) {
stopifnot(is(myTree, "phylo"))
# assumes FADs are returned sorted from GetFADs() function
sortedFADs <- GetFADs(myTree)
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
if (showPlot){
MYA <- max(as.numeric(dist.nodes(myTree)))/2
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
}
return(nls_mod)
}
set.seed(102)
exampleFigure <- function(d, n) {
testTree <- pbtree(1, d=d, n=n)
testFADs <- GetFADs(testTree)
myModel <- FitExponential(testTree)
forPlot <- data.frame(x=predict(myModel, newdata = list(dates=testFADs)), y=testFADs)
thePlot <- qplot(x=1:length(testFADs), y=testFADs, size=I(3)) +
geom_line(aes(x=x, y=y), data=forPlot, linetype=2, color="red", size=2) +
scale_x_continuous(labels=NULL) +
scale_y_continuous(labels=NULL) +
coord_flip() +
labs(x="Cumulative Number of Observed Taxa", y="Time", title=sprintf("Extinction = %.2f", d))
return(thePlot)
}
tiff(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullModel/Figs/Fig2-PurebirthVersusBirthdeath.tiff", width=1600, height=800)
grid.arrange(exampleFigure(d=1, n=300), exampleFigure(d=0, n=300), ncol=2)
dev.off()
tiff(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig2-PurebirthVersusBirthdeath.tiff", width=1600, height=800)
grid.arrange(exampleFigure(d=1, n=300), exampleFigure(d=0, n=300), ncol=2)
dev.off()
GetFADs <- function(myTree){
stopifnot(is(myTree, "phylo"))
require(ape)
allDistancesAsMatrix<-ape::dist.nodes(myTree)
#tips are numbered 1 + nTips, so we can add 1 to get the root node
rootNode<-length(myTree$tip.label)+1
#we pull out the row for the root node of the distance matrix
#looking only at columns for other nodes, not tips
FADs<-allDistancesAsMatrix[rootNode,seq(from=rootNode+2,to=nrow(allDistancesAsMatrix))]
return(sort(as.vector(FADs)))
}
FitExponential <- function(myTree, showPlot = FALSE) {
stopifnot(is(myTree, "phylo"))
# assumes FADs are returned sorted from GetFADs() function
sortedFADs <- GetFADs(myTree)
N <- 1:length(sortedFADs)
nls_mod <- nls(N ~ exp(a * sortedFADs), data=data.frame(sortedFADs = sortedFADs, N=N), start=list(a=1))
if (showPlot){
MYA <- max(as.numeric(dist.nodes(myTree)))/2
#hypothetical date values for producing smooth exponential predictions
evenFADs <- seq(0, MYA, length.out = 100)
predictedN <- predict(nls_mod, newdata = sortedFADs)
evenPredictedN <- predict(nls_mod, newdata=list(sortedFADs = evenFADs))
plot(sortedFADs, N, pch=16,xlim=c(0,MYA))
lines(evenFADs, evenPredictedN, col="red", lty=2, cex=10)
}
return(nls_mod)
}
set.seed(102)
exampleFigure <- function(d, n) {
testTree <- pbtree(1, d=d, n=n)
testFADs <- GetFADs(testTree)
myModel <- FitExponential(testTree)
forPlot <- data.frame(x=predict(myModel, newdata = list(dates=testFADs)), y=testFADs)
thePlot <- qplot(x=1:length(testFADs), y=testFADs, size=I(3)) +
geom_line(aes(x=x, y=y), data=forPlot, linetype=2, color="red", size=2) +
scale_x_continuous(labels=NULL) +
scale_y_continuous(labels=NULL) +
coord_flip() +
labs(x="Cumulative Number of Observed Taxa", y="Time", title=sprintf("Extinction = %.2f", d))
return(thePlot)
}
tiff(filename = "~/Dropbox/TurnoverPulseRedux/Manuscript-Paleobiology-TPHNullMode/Figs/Fig2-PurebirthVersusBirthdeath.tiff", width=1600, height=800)
grid.arrange(exampleFigure(d=1, n=300), exampleFigure(d=0, n=300), ncol=2)
dev.off()
